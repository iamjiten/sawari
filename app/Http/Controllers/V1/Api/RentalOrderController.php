<?php

namespace App\Http\Controllers\V1\Api;

use App\Enums\OrderStatusEnum;
use App\Enums\OrderTrackEnum;
use App\Enums\RentalOrderStatusEnum;
use App\Enums\UserTypeEnum;
use App\Http\Controllers\V1\SuperController;
use App\Http\Requests\AcceptRentalRequest;
use App\Http\Requests\RejectRentalOrderRequest;
use App\Http\Requests\RentalChangeStatusRequest;
use App\Http\Requests\RentalOrderCompletedRequest;
use App\Http\Requests\RentalOrderRequest;
use App\Http\Resources\RentalActivityResource;
use App\Http\Resources\RentalOrderResource;
use App\Http\Resources\TransactionResource;
use App\Models\BookedRentalVehicle;
use App\Models\RentalOrder;
use App\Models\Vehicle;
use App\Notifications\RentalResponseNotification;
use Carbon\Carbon;
use Illuminate\Http\JsonResponse;
use Illuminate\Http\Request;
use Illuminate\Http\Resources\Json\JsonResource;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Str;
use Mockery\Exception;

class RentalOrderController extends SuperController
{
    public array $withAll = [
        'pickupLocation:id,name,longitude,latitude',
        'dropOffLocation:id,name,longitude,latitude'
    ];

    public function __construct()
    {
        parent::__construct(
            RentalOrder::class,
            RentalOrderResource::class,
            RentalOrderRequest::class,
            RentalOrderRequest::class,
        );
    }

    public function index(): JsonResource
    {
        $model = $this->model::initializer()
            ->when(property_exists($this, 'withAll'), fn($query) => $query->with($this->withAll))
            ->when(property_exists($this, 'withCount'), fn($query) => $query->withCount($this->withCount))
            ->when(property_exists($this, 'withAggregate'), fn($query) => $this->applyWithAggregate($query))
            ->when(property_exists($this, 'scopes'), fn($query) => $this->applyScopes($query))
            ->when(property_exists($this, 'scopeWithValue'), fn($query) => $this->applyScopesWithValue($query));

        if (auth()->user()->merchant_id) {
            $model = $model->whereHas('vehicles', function ($q) {
                $q->where('merchant_id', auth()->user()->merchant_id);
            });
        }

        return $this->resource::collection($model->paginates());
    }

    public function store()
    {
//        $model = $this->model::query()
//            ->selfOngoing()
//            ->latest()
//            ->first();
//
//        if ($model) {
//            return $this->error('Ongoing order found', 422);
//        }

        $from = Carbon::parse(request()->pickup_date)->format('Y-m-d H:i:s');
        $to = Carbon::parse(request()->drop_off_date)->format('Y-m-d H:i:s');

        $vehicles = Vehicle::query()
            ->where('id', \request()->vehicle_id)
            ->whereHas('booked')
            ->withCount(['booked' => function ($q) use ($from, $to) {
                $q->where(function ($q) use ($from, $to) {
                    $q->where(function ($q) use ($from, $to) {
                        $q->where('from', '>=', $from)
                            ->where('from', '<=', $to);
                    })->orWhere(function ($r) use ($from, $to) {
                        $r->where('to', '>=', $from)
                            ->where('to', '<=', $to);
                    });
                });
            }])
            ->first();

        if ($vehicles?->booked_count > 0) {
            return $this->error('Vehicle already booked for same date', 422);
        }

        return parent::store(); // TODO: Change the autogenerated stub
    }

    public function show($id)
    {
        $order = $this->model::find($id);
        if ($order) {
            return RentalOrderResource::make($order);
        } else {
            return $this->error('no order found', 404);
        }
    }

    public function changeOrderStatus(RentalChangeStatusRequest $request)
    {
        $rentalOrder = RentalOrder::find($request->order_id);
        if ($rentalOrder) {
            if ($rentalOrder->user_id == auth()->id()) {

                switch ($request->status) {
                    case RentalOrderStatusEnum::Received->value:
                        DB::beginTransaction();
                        try {
                            $rentalOrder->update([
                                'status' => RentalOrderStatusEnum::Received->value,
                                'withDriver' => $request->withDriver,
                                'net_amount' => $request->net_amount
                            ]);
                            addToOrderTrack($rentalOrder, ['old' => RentalOrderStatusEnum::Pending->name, 'new' => RentalOrderStatusEnum::Received->name], OrderTrackEnum::Status->value);
                            DB::commit();
                        } catch (\Exception $e) {
                            return $this->error('failed to change status' . $e->getMessage(), 500);
                        }
                        break;
                    case RentalOrderStatusEnum::Cancelled->value:
                        $rentalOrder->update(['status' => RentalOrderStatusEnum::Cancelled->value]);
                        addToOrderTrack($rentalOrder, ['old' => RentalOrderStatusEnum::Received->name, 'new' => RentalOrderStatusEnum::Cancelled->name], OrderTrackEnum::Status->value);
                        break;
                    default:

                }
                return $this->success(null, 'status changed successfully');
            } else {
                return $this->error('You cannot change status of this order', 500);
            }
        } else {
            return $this->error('Order does not exits', 500);
        }
    }

    public function vehicleRequests()
    {
        $model = $this->model::query()
            ->where('status', (RentalOrderStatusEnum::Received)->value)
            ->withWhereHas('vehicles');

        return $this->resource::collection($model->paginate());
    }

    public function selfReceivedOrders()
    {
        $model = $this->model::query()
            ->selfStatus((RentalOrderStatusEnum::Received)->value)
            ->withWhereHas('vehicles', fn($q) => $q->with('vehicleInformation')->limit(1))
            ->get();

        if ($model) {
            return $this->resource::collection($model);
        } else {
            return response()->json([
                'data' => null
            ]);
        }
    }

    public function selfAssignedOrders()
    {
        $model = $this->model::query()
            ->selfStatus((RentalOrderStatusEnum::Assigned)->value)
            ->withWhereHas('vehicles', fn($q) => $q->with('vehicleInformation')->limit(1))
            ->get();

        if ($model) {
            return $this->resource::collection($model);
        } else {
            return response()->json([
                'data' => null
            ]);
        }
    }

    public function selfBookedOrders()
    {
        $model = $this->model::query()
            ->selfStatus((RentalOrderStatusEnum::Booked)->value)
            ->withWhereHas('vehicles', fn($q) => $q->with('vehicleInformation')->limit(1))
            ->get();

        if ($model) {
            return $this->resource::collection($model);
        } else {
            return response()->json([
                'data' => null
            ]);
        }
    }

    public function acceptRequest(AcceptRentalRequest $request): JsonResponse
    {
        $order = $this->model::find($request->order_id);

        DB::beginTransaction();
        try {
            $order->update([
                'status' => RentalOrderStatusEnum::Assigned->value
            ]);

            addToOrderTrack($order, ['old' => RentalOrderStatusEnum::Pending->name, 'new' => RentalOrderStatusEnum::Assigned->name], OrderTrackEnum::Status->value);

            $order->assignedVehicle()->sync($request->vehicle_id);

            $order->booked()->create([
                'vehicle_id' => $request->vehicle_id,
                'from' => $order->pickup_date,
                'to' => $order->drop_off_date
            ]);
            DB::commit();

            $order->user->notify(new RentalResponseNotification($order, true, 'Now you can pay to book your vehicle'));
            return $this->success(null, 'approved');
        } catch (Exception $e) {
            DB::rollBack();
            return $this->somethingWentWrong($e);
        }

    }

    public function cancelRequest(Request $request): JsonResponse
    {
        $request->validate([
            'order_id' => ['required'],
            'reason_id' => ['required']
        ]);

        $rentalOrder = $this->model::find($request->order_id);
        if ($rentalOrder->user_id == auth()->id()) {
            if ($rentalOrder) {
                $rentalOrder->update(['status' => RentalOrderStatusEnum::Cancelled->value, 'reason_id' => $request->reason_id]);
                addToOrderTrack($rentalOrder, ['old' => RentalOrderStatusEnum::Received->name, 'new' => RentalOrderStatusEnum::Cancelled->name], OrderTrackEnum::Status->value);
                $rentalOrder?->booked?->delete();
                return $this->success(null, 'order cancelled successfully');
            } else {
                return $this->error('failed to cancel order', 500);
            }
        } else {
            return $this->error('unauthorized', 401);
        }

    }

    public function rejectRequest(RejectRentalOrderRequest $request): JsonResponse
    {
        if (auth()->user()->type == UserTypeEnum::Admin) {
            $order = $this->model::find($request->order_id);
            try {
                if ($order) {
                    $order->update([
                        'status' => RentalOrderStatusEnum::Reject->value,
                        'remarks' => $request->remarks
                    ]);

                    addToOrderTrack($order, ['old' => RentalOrderStatusEnum::Received->name, 'new' => RentalOrderStatusEnum::Reject->name], OrderTrackEnum::Status->value);

                    $order?->user->notify(new RentalResponseNotification($order, false, $request->remarks));
                    return $this->success(null, 'order rejected');
                } else {
                    return $this->error('order do not exist', 404);
                }
            } catch (Exception $e) {
                DB::rollBack();
                return $this->somethingWentWrong($e);
            }
        } else {
            return $this->error('unauthorized', 401);
        }

    }

    public function selfActivity()
    {
        $model = $this->model::initializer()
            ->selfActivity()
            ->when(property_exists($this, 'withAll'), fn($query) => $query->with($this->withAll))
            ->when(property_exists($this, 'withCount'), fn($query) => $query->withCount($this->withCount))
            ->when(property_exists($this, 'withAggregate'), fn($query) => $this->applyWithAggregate($query))
            ->when(property_exists($this, 'scopes'), fn($query) => $this->applyScopes($query))
            ->when(property_exists($this, 'scopeWithValue'), fn($query) => $this->applyScopesWithValue($query));

        return RentalActivityResource::collection($model->paginates());
    }

    public function orderComplete(RentalOrderCompletedRequest $request)
    {
        if (auth()->user()->type == UserTypeEnum::Admin->value)
            return $this->error('unauthorized user', 401);

        $order = $this->model::find($request->order_id);
        if ($order) {
            DB::beginTransaction();
            try {
                $order->update([
                    'status' => RentalOrderStatusEnum::Completed->value
                ]);
                addToOrderTrack($order, ['old' => RentalOrderStatusEnum::Booked->name, 'new' => RentalOrderStatusEnum::Completed->name], OrderTrackEnum::Status->value);
                $order->booked?->delete();
                DB::commit();
            } catch (\Exception $e) {
                DB::rollBack();
                return $this->somethingWentWrong($e);
            }
            return $this->success(null, 'order completed');
        } else {
            return $this->error('order not found', 404);
        }
    }

    public function createTransaction(Request $request): JsonResponse
    {
        $request->validate([
            'order_id' => [
                'required'
            ]
        ]);

        $order = $this->model::find($request['order_id']);
        if ($order) {
            $rentalTransaction = $order->transaction()->create([
                'pid' => Str::uuid()->toString(),
                'user_id' => auth()->id(),
                'amount' => $order->net_amount,
                'created_by' => auth()->id(),
                'updated_by' => auth()->id()
            ]);

            return $this->success($rentalTransaction, 'transaction created');
        } else {
            return $this->error('no order found', 404);
        }

    }
}
