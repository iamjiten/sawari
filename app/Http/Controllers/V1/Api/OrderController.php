<?php

namespace App\Http\Controllers\V1\Api;

use App\Enums\OrderStatusEnum;
use App\Enums\OrderTrackEnum;
use App\Enums\PackageStatusEnum;
use App\Enums\TransactionStatusEnum;
use App\Events\NewOrderReceivedEvent;
use App\Events\OrderReceivedEvent;
use App\Events\OrderTrackEvent;
use App\Events\RemoveDynamicOrderEvent;
use App\Http\Controllers\V1\SuperController;
use App\Http\Requests\ChangeOrderStatusRequest;
use App\Http\Requests\OrderRequest;
use App\Http\Requests\RetryOrderRequest;
use App\Http\Resources\OrderResource;
use App\Http\Resources\OrderTrackResource;
use App\Http\Resources\SimpleOrderResource;
use App\Models\MoverOrder;
use App\Models\Order;
use App\Models\Trip;
use App\Notifications\OrderTrackNotification;
use App\Services\ExpireData;
use Illuminate\Http\JsonResponse;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Str;

class OrderController extends SuperController
{
    public array $withAll = [
        'packages',
        'vehicleType',
        'deliveryType',
        'transaction',
        'trip',
        'ratings'
    ];

    public function __construct()
    {
        parent::__construct(
            Order::class,
            OrderResource::class,
            OrderRequest::class,
            OrderRequest::class
        );
    }

    public function store()
    {
        $model = $this->model::query()
            ->selfOngoing()
            ->latest()
            ->first();

        if ($model) {
            return $this->error('Ongoing order found', 422);
        }

        return parent::store(); // TODO: Change the autogenerated stub
    }

    public function self()
    {
        $model = $this->model::initializer()
            ->self()
            ->when(property_exists($this, 'withAll'), fn($query) => $query->with($this->withAll))
            ->when(property_exists($this, 'withCount'), fn($query) => $query->withCount($this->withCount))
            ->when(property_exists($this, 'withAggregate'), fn($query) => $this->applyWithAggregate($query))
            ->when(property_exists($this, 'scopes'), fn($query) => $this->applyScopes($query))
            ->when(property_exists($this, 'scopeWithValue'), fn($query) => $this->applyScopesWithValue($query));

        return $this->resource::collection($model->paginates());
    }

    public function receivedOrders()
    {
        $user = auth()->user();
        $vehicle_type = $user->load('vehicle')->vehicle->vehicle_type_id;

        $model = $this->model::query()
            ->select('id', 'slug', 'net_amount', 'user_id', 'expires_at')
            ->withCount('packages')
            ->with(['user:id,name', 'packages' => function ($query) {
                $query
                    ->select('id', 'sender_address', 'receiver_address', 'package_size_id', 'package_category_id', 'package_sensible_id', 'sender_receiver_distance')
                    ->with(['size:id,weight', 'sensible:id,name', 'category:id,name']);
            }])->where('vehicle_type_id', $vehicle_type)
            ->receivedOrders()
            ->latest()
            ->exceptSelf();

        return SimpleOrderResource::collection($model->paginates());
    }

    public function changeOrderStatus(ChangeOrderStatusRequest $request)
    {
        $order_id = $request->order_id;
        $status = $request->status;

        if ($status == OrderStatusEnum::Received->value) {
            $order = Order::query()
                ->with('packages')
                ->whereId($request->order_id)
                ->whereUserId(auth()->id())
                ->first(['id', 'slug', 'net_amount']);
            if ($order) {
                DB::beginTransaction();
                $order->transaction()->create([
                    'pid' => Str::uuid()->toString(),
                    'user_id' => auth()->id(),
                    'amount' => $order->net_amount,
                    'created_by' => auth()->id(),
                    'updated_by' => auth()->id()
                ]);
                $order->update([
                    'status' => OrderStatusEnum::Received->value,
                    'expires_at' => (new ExpireData())->getPackageExpiresAt()
                ]);
                foreach ($order->packages as $package) {
                    $package->update([
                        'status' => PackageStatusEnum::Processing->value
                    ]);
                }
                addToOrderTrack($order, ['old' => OrderStatusEnum::Pending->name, 'new' => OrderStatusEnum::Received->name], OrderTrackEnum::Status->value);
                DB::commit();

                $order->loadCount('packages');
                broadcast(new OrderReceivedEvent($order))->toOthers();
                return $this->success($this->resource::make($order), 'status changed to received');
            } else {
                return $this->error('Order not found', 404);
            }

        }

        if ($status == OrderStatusEnum::Cancelled->value) {
            $order = Order::query()
                ->with('packages')
                ->whereId($request->order_id)
                ->whereUserId(auth()->id())
                ->first(['id', 'user_id', 'status', 'slug']);
            if ($order->status?->value == OrderStatusEnum::Received->value) {
                DB::beginTransaction();
                $order->update([
                    'status' => OrderStatusEnum::Cancelled->value
                ]);
                foreach ($order->packages as $package) {
                    $package->update([
                        'status' => PackageStatusEnum::Pending->value
                    ]);
                }
                addToOrderTrack($order, ['old' => OrderStatusEnum::Received->name, 'new' => OrderStatusEnum::Cancelled->name], OrderTrackEnum::Status->value);
                DB::commit();
                $order->user->notify(new OrderTrackNotification($order));           // for sender notification
                broadcast(new RemoveDynamicOrderEvent($order))->toOthers();
                return $this->success(null, 'your order has been cancelled');
            } else {
                return $this->error('you cannot cancel this order', 422);
            }

        }

        $hasTrip = Trip::where('order_id', $order_id)->count();
        if ($hasTrip) {
            $order = Order::query()
                ->whereId($request->order_id)
                ->first(['id', 'user_id', 'token', 'slug']);
            switch ($status) {
                case    OrderStatusEnum::On_Pickup_Location->value:
                    DB::beginTransaction();
                    $order->update([
                        'status' => OrderStatusEnum::On_Pickup_Location->value
                    ]);
                    addToOrderTrack($order, ['old' => OrderStatusEnum::Assigned->name, 'new' => OrderStatusEnum::On_Pickup_Location->name], OrderTrackEnum::Status->value);
                    DB::commit();
                    $order->user->notify(new OrderTrackNotification($order));
                    broadcast(new OrderTrackEvent($order))->toOthers();
                    return $this->success(['status' => true], 'status changed to on pickup location');
                case    OrderStatusEnum::On_Way->value:
                    if ($request->token == $order->token) {
                        DB::beginTransaction();
                        $order->transaction->update([
                            'status' => TransactionStatusEnum::Completed->value
                        ]);
                        $order->update([
                            'status' => OrderStatusEnum::On_Way->value
                        ]);
                        addToOrderTrack($order, ['old' => OrderStatusEnum::On_Pickup_Location->name, 'new' => OrderStatusEnum::On_Way->name], OrderTrackEnum::Status->value);
                        DB::commit();
                        $order->user->notify(new OrderTrackNotification($order));
                        broadcast(new OrderTrackEvent($order))->toOthers();
                        return $this->success(['status' => true], 'status changed to on way');
                    }
                    return $this->error('token did not matched', 404);
                case    OrderStatusEnum::On_Drop_Location->value:
                    DB::beginTransaction();
                    $order->update([
                        'status' => OrderStatusEnum::On_Drop_Location->value
                    ]);
                    addToOrderTrack($order, ['old' => OrderStatusEnum::On_Way->name, 'new' => OrderStatusEnum::On_Drop_Location->name], OrderTrackEnum::Status->value);
                    DB::commit();
                    $order->user->notify(new OrderTrackNotification($order));
                    broadcast(new OrderTrackEvent($order))->toOthers();
                    return $this->success(['status' => true], 'status changed to on drop location');
                default:
                    return $this->error('failed to update status', 500);
            }

        } else {
            return $this->error('no trip found', 404);
        }
    }


    public function selfOngoing()
    {
        $model = $this->model::initializer()
            ->selfOngoing()
            ->when(property_exists($this, 'withAll'), fn($query) => $query->with($this->withAll))
            ->latest()
            ->first();

        if ($model) {
            return $this->resource::make($model);
        } else {
            return $this->success(null, 'No Data Found');
        }
    }

    public function selfActivity()
    {
        $model = $this->model::initializer()
            ->selfActivity()
            ->withCount('packages')
            ->when(property_exists($this, 'withAll'), fn($query) => $query->with($this->withAll))
            ->when(property_exists($this, 'withCount'), fn($query) => $query->withCount($this->withCount))
            ->when(property_exists($this, 'withAggregate'), fn($query) => $this->applyWithAggregate($query))
            ->when(property_exists($this, 'scopes'), fn($query) => $this->applyScopes($query))
            ->when(property_exists($this, 'scopeWithValue'), fn($query) => $this->applyScopesWithValue($query));

        return $this->resource::collection($model->paginates(10));
    }

    public function receiverActivity()
    {
        $model = $this->model::initializer()
            ->selfReceiverActivity()
            ->when(property_exists($this, 'withAll'), fn($query) => $query->with($this->withAll))
            ->when(property_exists($this, 'withCount'), fn($query) => $query->withCount($this->withCount))
            ->when(property_exists($this, 'withAggregate'), fn($query) => $this->applyWithAggregate($query))
            ->when(property_exists($this, 'scopes'), fn($query) => $this->applyScopes($query))
            ->when(property_exists($this, 'scopeWithValue'), fn($query) => $this->applyScopesWithValue($query));

        return $this->resource::collection($model->paginates());
    }

    public function retryOrder(RetryOrderRequest $request): JsonResponse
    {
        $request->validated();
        $order = Order::find($request->order_id);

        if ($order->user_id != auth()->id()) {
            //unauthenticated user
            return $this->error('unauthenticated user', 401);
        }
        if ($order) {
            //retry here
            $order->update(['expires_at' => (new ExpireData())->getPackageExpiresAt()]);
            broadcast(new OrderReceivedEvent($order));
            return $this->success(OrderResource::make($order), 'retry successful');
        } else {
            //order does not exist
            return $this->error('order does not exists', 404);
        }
    }
}
